ggplot(aes(PC1, PC2, shape = Region)) +
geom_point(alpha = 0.7, size = 3) +
# geom_text(check_overlap = TRUE, hjust = "inward", family = "IBMPlexSans") +
# labs(color = NULL) +
stat_ellipse() +
theme_classic()
library(tinytex)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
render(output_format="all")
library(rmarkdown)
render(output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
**Figure 2.**
**Figure 2.**
**Figure 2.**
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
render("submission/manuscript.Rmd", output_format="all")
library(tidyverse)
library(tidymodels)
library(tidytext)
library(vegan)
library(here)
path <- here("data", "spine_chem.csv")
read_csv(path)
data_parsed <- read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north"))
View(data_parsed)
data_parsed %>% group_by(Sex, Region) %>% summarize(weight = mean(weightKg))
data_parsed %>% group_by(Sex, Region) %>% summarize(weight = mean(weightKg), length = mean(lengthCm))
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north"))
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(c(Code, Region, Sex) tolower)
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(c(Code, Region, Sex), tolower)
?rename_with
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(Code, Region, Sex, tolower)
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(Code, tolower)
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(Code, ~tolower)
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north"))
colnames(read_csv(path))
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with("Code", ~tolower)
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with("Code", tolower)
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(Sex, tolower)
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(.x$Sex, tolower)
# load libraries ----------------------------------------------------------
library(tidyverse)
library(here)
# load data --------------------------------------------------------------
path <- here("data", "spine_chem.csv")
data <- read_csv(path)
# clean data --------------------------------------------------------------
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(.x$Sex, tolower)
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(.$Sex, tolower)
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(.$xSex, tolower)
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(.x$Sex, tolower)
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(.$Sex, tolower)
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(tolower)
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(tolower) %>%
rename(length_cm = lengthcm, weight_kg = weightkg)
read_csv(path) %>%
mutate(across(c(Ba:Fe), .fns = ~ .x / Ca * 1000, .names = "{.col}_Ca"),
Sr_Ba = Sr / Ba,
Sex = case_when(Sex == 1 ~ "female",
TRUE ~ "male"),
Region = case_when(Region == 1 ~ "south",
TRUE ~ "north")) %>%
rename_with(tolower) %>%
rename(length_cm = lengthcm, weight_kg = weightkg) %>%
write_csv("data/data_parsed.csv")
data <- read_csv(here('data', 'data_parsed.csv'))
pca_data <- data %>%
select(-c(ca:fe), -c(length_cm, weight_kg), -sr_ba)
pca_recipe <- recipe(~., data = pca_data) %>%
update_role(code, region, sex, new_role = "id") %>%
step_normalize(all_predictors()) %>%
step_pca(all_predictors())
library(tidyverse)
library(tidymodels)
library(vegan)
library(here)
library(tidyverse)
library(tidymodels)
library(vegan)
library(here)
data <- read_csv(here('data', 'data_parsed.csv'))
pca_data <- data %>%
select(-c(ca:fe), -c(length_cm, weight_kg), -sr_ba)
pca_recipe <- recipe(~., data = pca_data) %>%
update_role(code, region, sex, new_role = "id") %>%
step_normalize(all_predictors()) %>%
step_pca(all_predictors())
pca_prep <- prep(pca_recipe)
tidied_pca <- tidy(pca_prep, 2)
tidied_pca %>%
filter(component %in% paste0("PC", 1:5)) %>%
mutate(component = fct_inorder(component)) %>%
ggplot(aes(value, terms, fill = terms)) +
geom_col(show.legend = FALSE) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL)
tidied_pca %>%
filter(component %in% paste0("PC", 1:4)) %>%
group_by(component) %>%
top_n(8, abs(value)) %>%
ungroup() %>%
mutate(terms = reorder_within(terms, abs(value), component)) %>%
ggplot(aes(abs(value), terms, fill = value > 0)) +
geom_col() +
facet_wrap(~component, scales = "free_y") +
scale_y_reordered() +
labs(
x = "Absolute value of contribution",
y = NULL, fill = "Positive?"
)
library(tidytext)
tidied_pca %>%
filter(component %in% paste0("PC", 1:4)) %>%
group_by(component) %>%
top_n(8, abs(value)) %>%
ungroup() %>%
mutate(terms = reorder_within(terms, abs(value), component)) %>%
ggplot(aes(abs(value), terms, fill = value > 0)) +
geom_col() +
facet_wrap(~component, scales = "free_y") +
scale_y_reordered() +
labs(
x = "Absolute value of contribution",
y = NULL, fill = "Positive?"
)
juice(pca_prep) %>%
ggplot(aes(PC1, PC2, shape = Region)) +
geom_point(alpha = 0.7, size = 3) +
# geom_text(check_overlap = TRUE, hjust = "inward", family = "IBMPlexSans") +
# labs(color = NULL) +
stat_ellipse() +
theme_classic() +
theme(
axis.line.x = element_line(colour = "grey50"),
axis.line.y = element_line(colour = "grey50")
)
juice(pca_prep) %>%
ggplot(aes(PC1, PC2, shape = region)) +
geom_point(alpha = 0.7, size = 3) +
# geom_text(check_overlap = TRUE, hjust = "inward", family = "IBMPlexSans") +
# labs(color = NULL) +
stat_ellipse() +
theme_classic() +
theme(
axis.line.x = element_line(colour = "grey50"),
axis.line.y = element_line(colour = "grey50")
)
pca_juiced <- juice(pca_prep)
metadata <- pca_juiced %>%
select(-c(PC1:PC5, code)) %>%
mutate(region_sex = paste0(region, sex))
pca_res <- pca_juiced %>%
select(PC1:PC5)
pca_dist <- as.dist(as.matrix(dist(pca_res)))
set.seed(1)
adonis2(pca_dist ~ region * sex, data = metadata, method = "eu", parallel = 16, permutations = 1e5)
anova(betadisper(pca_dist, metadata$region_sex))
permutest(betadisper(pca_dist, metadata$region_sex), pairwise = TRUE)
View(metadata)
pca_res
pca_juiced
adonis2(pca_dist ~ region * sex, data = pca_juiced, method = "eu", parallel = 16, permutations = 1e5)
adonis2(pca_dist ~ region * sex, data = pca_juiced, method = "eu", parallel = 16, permutations = 1e5) %>% tidy()
anova(betadisper(pca_dist, metadata$region_sex))
permutest(betadisper(pca_dist, metadata$region_sex), pairwise = TRUE)
adonis2(pca_dist ~ region * sex, data = pca_juiced, method = "eu", parallel = 16, permutations = 1e5)
juice(pca_prep) %>%
ggplot(aes(PC1, PC2, shape = sex)) +
geom_point(alpha = 0.7, size = 3) +
# geom_text(check_overlap = TRUE, hjust = "inward", family = "IBMPlexSans") +
# labs(color = NULL) +
stat_ellipse() +
theme_classic() +
theme(
axis.line.x = element_line(colour = "grey50"),
axis.line.y = element_line(colour = "grey50")
)
juice(pca_prep) %>%
ggplot(aes(PC1, PC2, shape = region)) +
geom_point(alpha = 0.7, size = 3) +
# geom_text(check_overlap = TRUE, hjust = "inward", family = "IBMPlexSans") +
# labs(color = NULL) +
stat_ellipse() +
theme_classic() +
theme(
axis.line.x = element_line(colour = "grey50"),
axis.line.y = element_line(colour = "grey50")
)
library(markdown)
render("submission/manuscript.Rmd", "all")
library(rmarkdown)
render("submission/manuscript.Rmd", "all")
?render
render("submission/manuscript.Rmd", output_format = "all")
?render
render("submission/manuscript.Rmd", output_format = "all")
render("submission/manuscript.Rmd", output_format = "all")
render("submission/manuscript.Rmd", output_format = "all")
library(rmarkdown)
render("submission/manuscript.Rmd", output_format = "all")
render("submission/manuscript.Rmd", output_format = "all")
render("submission/manuscript.Rmd", output_format = "all")
render("submission/manuscript.Rmd", output_format = "all")
install.packages("discrim")
# 0. load libraries -------------------------------------------------------
library(tidyverse)
library(here)
#library(ggsignif)
library(ggpubr)
library(rstatix)
# 1. load data ------------------------------------------------------------
data <- readr::read_csv(here::here("data", "data_parsed.csv")) %>%
dplyr::mutate(dplyr::across(
c(region, sex),
.fns = as_factor
))
# 2. select data ----------------------------------------------------------
anova_data <- data %>%
dplyr::select(region, sex, ba_ca:fe_ca)
# log transform to improve normality
log_trans <- anova_data %>%
dplyr::mutate(across(ba_ca:fe_ca, ~ log(.x + 1e-10)))
# 3. functions ------------------------------------------------------------
get_anova_tukey_table <- function(element, df) {
element <- rlang::as_name(enquo(element))
formula <- formula(paste(element, "~", "region*sex"))
aov(formula, data = df) %>%
TukeyHSD() %>%
broom::tidy() %>%
dplyr::mutate(element = element)
}
# 4. analysis -------------------------------------------------------------
elements <- log_trans %>%
dplyr::select(-sex, -region) %>%
names()
anova_output <- purrr::map_dfr(elements, get_anova_tukey_table, df = log_trans)
# 5. make a table --------------------------------------------------------
# make a nice-looking table of all the two-way ANOVA results with Tukey's test adjusted pvalues
anova_table <- anova_output %>%
dplyr::mutate(sort_col = case_when(
term == "region" ~ 1,
term == "sex" ~ 2,
TRUE ~ 3
)) %>%
dplyr::arrange(sort_col, contrast, element) %>%
dplyr::select(-c(null.value:conf.high, sort_col)) %>%
select(term, contrast, element, adj.p.value) %>%
# dplyr::mutate(
#   adj.p.value = round(adj.p.value, digits = 3),
#   adj.p.value = dplyr::if_else(
#     adj.p.value == 0,
#     "< 0.001",
#     as.character(adj.p.value)
#   )
# ) %>%
dplyr::mutate(adj.p.value = signif(adj.p.value, 2)) %>%
# change the text of the columns to look nice
dplyr::mutate(
element = stringr::str_replace(element, "_", " "),
element = stringr::str_to_title(element),
element = stringr::str_replace(element, " ", "/"),
contrast = stringr::str_replace(contrast, "-", " vs. "),
term = stringr::str_replace(term, ":", " * "),
contrast = stringr::str_replace_all(contrast, ":", ": ")
) %>%
dplyr::rename(
Variable = term,
Comparison = contrast,
"Elemental ratio" = element,
"Adjusted p-value" = adj.p.value
)
saveRDS(anova_table, here::here("figures", "anova_table.RDS"))
# 6. make a bar chart -----------------------------------------------------
# update the element ratio names in the log transformed data
log_trans_cleaned <- log_trans %>%
tidyr::pivot_longer(ba_ca:fe_ca, names_to = "element") %>%
dplyr::mutate(
element = stringr::str_replace(element, "_", " "),
element = stringr::str_to_title(element),
element = stringr::str_replace(element, " ", "/")
)
# do the same to the untransformed data; we will use this one for the bar chart
anova_data_cleaned <- anova_data %>%
tidyr::pivot_longer(ba_ca:fe_ca, names_to = "element") %>%
dplyr::mutate(
element = stringr::str_replace(element, "_", " "),
element = stringr::str_to_title(element),
element = stringr::str_replace(element, " ", "/")
)
# adding p-values to the figure is a pain because of the free y axis
# can use rstatix package to calculate where the coordinates should be given a free y
# the package adds a lot of extra info to the data frame, so calculating the vale ~ region * sex model
# and then adding coordinates to that is not possible. it needs to be one variable
# get the base dataframe using the simple anova model with untransformed values
stat.test <- anova_data_cleaned %>%
dplyr::group_by(element) %>%
rstatix::tukey_hsd(value ~ region)
# get the dataframe for the full model using log transformed data
stat.test.full.log <- log_trans_cleaned %>%
dplyr::group_by(element) %>%
rstatix::tukey_hsd(value ~ region * sex)
# trim the full model df down
stat.test.region.log <- stat.test.full.log %>%
dplyr::filter(term == "region")
# replace the p.adj values from the simple one with those of the full model
stat.test$p.adj <- stat.test.region.log$p.adj
stat.test$p.adj.signif <- stat.test.region.log$p.adj.signif
# add the xy coordinates to be graphed
stat.test.xy <- stat.test %>%
rstatix::add_xy_position(x = "region", fun = "mean_sd", scales = "free") %>%
# even with new p values, it still thinks some values aren't significant
# simple hack to get everything to plot is to just filter the data by p values
dplyr::filter(p.adj < 0.05) %>%
dplyr::mutate(p.adj = 0.05)
# make the plot using ggpubr rather than base ggplot2
ggpubr::ggbarplot(anova_data_cleaned, x = "region", y = "value", add = "mean_sd", facet.by = "element") +
ggplot2::facet_wrap(~element, scale = "free_y", ncol = 2) +
ggpubr::stat_pvalue_manual(stat.test.xy,
hide.ns = FALSE, # if you hide this, then some values won't show up because they aren't significant in the simple model
tip.length = 0,
linetype = 0,
label = "* p < {p.adj}",
size = 2.5
) +
ggplot2::scale_y_continuous(expand = ggplot2::expansion(mult = c(0.0, 0.25))) +
ggplot2::scale_fill_grey() + ggplot2::theme_bw() +
ggplot2::ylab("element-to-Ca ratio x 1,000") +
ggplot2::xlab(NULL) +
ggplot2::theme(
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
text = element_text(family = "Arial"),
axis.text = element_text(color = "black")
)
ggplot2::ggsave(here::here("figures", "bar_chart.tiff"), dpi = 1200, width = 129, height = 193.5, units = "mm")
ggplot2::ggsave(here::here("figures", "bar_chart.jpg"), dpi = 600, width = 129, height = 193.5, units = "mm")
# saving this for calculations in the manuscript.Rmd file
saveRDS(stat.test.full.log, here::here("data", "anova_output_data.RDS"))
